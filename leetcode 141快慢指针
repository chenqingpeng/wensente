使用哈希表
public  boolean hasCycle（ListNode head）{
         Set < ListNode > ans =  new  HashSet <>（）;
        而（头！= 空）{
            如果（！ ANS 。添加（头））{
                返回 真;
            }
            头=头。下一个;
        }
        返回 false ;
    }
    
    快慢指针

设计两个指针，一个为当前例程slow，另一个为下一计数器fast，由我们日常中指导跑步可以认识，在环形线路中，当fast例程持续领先时，fast会以反超slow一圈的结果使两者再次相遇，所以我们也在链表中设置快慢两个中断，如果存在环形链表那么同时就会相遇
公共 布尔hasCycle（ListNode头）{
            如果（头== 空 ||头。接下来== 空）{
                返回 假;
            }
            ListNode慢=头;
            ListNode快速= head 。下一个;
            而（慢=！快）{
                如果（快== 空 ||快。接下来== 空）{
                    返回 假;
                }
                慢=慢。下一个;
                快速=快速。接下来。下一个;
            }
            返回 true ;
        }
    }
